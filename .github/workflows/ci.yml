name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run CI weekly to catch dependency issues
    - cron: '0 0 * * 0'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # ============================================================================
  # Basic validation (fast feedback)
  # ============================================================================
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Check compilation
        run: cargo check --all-targets --all-features

  # ============================================================================
  # Code quality and formatting
  # ============================================================================
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Check formatting
        run: cargo fmt --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  # ============================================================================
  # Cross-platform testing matrix
  # ============================================================================
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        include:
          # Test MSRV (Minimum Supported Rust Version)
          - os: ubuntu-latest
            rust: 1.70.0  # Update this to your actual MSRV
          # Test on ARM64 macOS
          - os: macos-14  # ARM64 runner
            rust: stable

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-${{ matrix.rust }}

      - name: Run tests
        run: cargo test --all-features --verbose

      - name: Run tests (no features)
        run: cargo test --no-default-features --verbose

      - name: Run tests (async feature only)
        run: cargo test --no-default-features --features async --verbose

      - name: Run tests (chrono feature only)
        run: cargo test --no-default-features --features chrono --verbose

      - name: Test documentation
        run: cargo test --doc --all-features

      - name: Test examples
        run: |
          cargo run --example demo
          cargo run --example format_preservation_demo --features async

  # ============================================================================
  # Security and dependency auditing
  # ============================================================================
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

      - name: Install cargo-deny
        run: cargo install cargo-deny

      - name: Run cargo-deny
        run: cargo deny check

  # ============================================================================
  # Documentation
  # ============================================================================
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Build documentation
        run: cargo doc --all-features --no-deps --document-private-items

      - name: Check for broken links in docs
        run: cargo doc --all-features --no-deps 2>&1 | grep -q "warning.*unresolved link" && exit 1 || exit 0

  # ============================================================================
  # Performance benchmarks
  # ============================================================================
  bench:
    name: Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Run benchmarks
        run: cargo bench --all-features

      - name: Store benchmark results
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'cargo'
          output-file-path: target/criterion/*/base/estimates.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          comment-on-alert: true
          alert-threshold: '120%'
          fail-on-alert: true

  # ============================================================================
  # Memory safety (Miri)
  # ============================================================================
  miri:
    name: Miri
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: miri

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Setup Miri
        run: cargo miri setup

      - name: Run Miri
        run: cargo miri test --all-features
        env:
          MIRIFLAGS: -Zmiri-strict-provenance

  # ============================================================================
  # Code coverage
  # ============================================================================
  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Generate coverage report
        run: cargo tarpaulin --all-features --out xml --timeout 120

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./cobertura.xml
          fail_ci_if_error: true

  # ============================================================================
  # Integration testing with real-world configs
  # ============================================================================
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Create test configs
        run: |
          mkdir -p test-configs
          echo 'app_name = "ci-test"' > test-configs/simple.noml
          echo 'port = env("TEST_PORT", 8080)' >> test-configs/simple.noml
          echo 'include "nested.noml"' >> test-configs/simple.noml
          echo 'nested_value = "from-include"' > test-configs/nested.noml

      - name: Test CLI tool
        run: |
          export TEST_PORT=9000
          cargo run -- validate test-configs/simple.noml
          cargo run -- parse test-configs/simple.noml

      - name: Test format preservation
        run: |
          # Create a config with specific formatting
          cat > test-configs/formatted.noml << 'EOF'
          # My app configuration
          app_name = "formatted-test"    # Application name
          version = "1.0.0"             # Version info
          
          [server]
              host = "localhost"        # Server host
              port = 8080              # Server port
          EOF
          
          # Parse and verify format preservation works
          cargo run --example format_preservation_demo

  # ============================================================================
  # Final status check
  # ============================================================================
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [check, fmt, clippy, test, security, docs, coverage, integration]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.check.result }}" != "success" ]]; then exit 1; fi
          if [[ "${{ needs.fmt.result }}" != "success" ]]; then exit 1; fi
          if [[ "${{ needs.clippy.result }}" != "success" ]]; then exit 1; fi
          if [[ "${{ needs.test.result }}" != "success" ]]; then exit 1; fi
          if [[ "${{ needs.security.result }}" != "success" ]]; then exit 1; fi
          if [[ "${{ needs.docs.result }}" != "success" ]]; then exit 1; fi
          if [[ "${{ needs.coverage.result }}" != "success" ]]; then exit 1; fi
          if [[ "${{ needs.integration.result }}" != "success" ]]; then exit 1; fi
          echo "All CI jobs passed! ðŸŽ‰"