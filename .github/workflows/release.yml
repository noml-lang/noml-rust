name: Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0

env:
  CARGO_TERM_COLOR: always

jobs:
  # ============================================================================
  # Create GitHub Release
  # ============================================================================
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for changelog

      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Extract changelog for this version
          if [[ -f CHANGELOG.md ]]; then
            # Get content between version headers
            awk '/^## \['"${{ steps.get_version.outputs.version }}"'\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md > release_notes.md
          else
            echo "Release ${{ steps.get_version.outputs.version }}" > release_notes.md
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false

  # ============================================================================
  # Build and upload release binaries
  # ============================================================================
  build-release:
    name: Build Release
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: noml
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            binary_name: noml
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: noml.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: noml
          - os: macos-14  # ARM64
            target: aarch64-apple-darwin
            binary_name: noml

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-${{ matrix.target }}

      - name: Install musl tools (Linux)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get install -y musl-tools

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Unix)
        if: runner.os != 'Windows'
        run: strip target/${{ matrix.target }}/release/${{ matrix.binary_name }}

      - name: Create archive
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            archive_name="noml-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.zip"
            7z a "$archive_name" target/${{ matrix.target }}/release/${{ matrix.binary_name }}
          else
            archive_name="noml-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz"
            tar -czf "$archive_name" -C target/${{ matrix.target }}/release ${{ matrix.binary_name }}
          fi
          echo "ARCHIVE_NAME=$archive_name" >> $GITHUB_ENV
          echo "ARCHIVE_PATH=$(pwd)/$archive_name" >> $GITHUB_ENV

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ARCHIVE_PATH }}
          asset_name: ${{ env.ARCHIVE_NAME }}
          asset_content_type: application/octet-stream

  # ============================================================================
  # Publish to crates.io
  # ============================================================================
  publish-crate:
    name: Publish to Crates.io
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Verify version matches tag
        run: |
          cargo_version=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
          tag_version="${{ needs.create-release.outputs.version }}"
          if [[ "$cargo_version" != "$tag_version" ]]; then
            echo "Version mismatch: Cargo.toml has $cargo_version, tag is $tag_version"
            exit 1
          fi

      - name: Run final tests
        run: cargo test --all-features

      - name: Publish to crates.io
        run: cargo publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  # ============================================================================
  # Update documentation
  # ============================================================================
  update-docs:
    name: Update Documentation
    needs: publish-crate
    runs-on: ubuntu-latest
    if: always() && needs.publish-crate.result == 'success'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Build documentation
        run: cargo doc --all-features --no-deps

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc
          destination_dir: api